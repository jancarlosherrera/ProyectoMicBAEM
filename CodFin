#include <stdbool.h>
#include <stdint.h>
#include "inc/tm4c1294ncpdt.h"

void Delay(unsigned long counter); // used to add delay
void HC05_init(void); // Initialize UART5 module for HC-05
char Bluetooth_Read(void); //Read data from Rx5 pin of TM4C123
void Bluetooth_Write(unsigned char data); // Transmit a character to HC-05 over Tx5 pin
void Bluetooth_Write_String(char *str); // Transmit a string to HC-05 over Tx5 pin
int LM35(void);
int interrup(int cont
uint32_t i,t, Cta,control,PETR,cont,iter;
int LimPB = 5;
int LimP1 = 12;
int LimP2 = 21;
int va1, vol; //vol=Vout traduct
double data[2],ent;


int main(void)
{

    SYSCTL_RCGCGPIO_R |= 0X1A14;
    while( (SYSCTL_PRGPIO_R & 0X1A14) ==0);
    /*
    GPIO_PORTE_AHB_DIR_R = 0X0F;
    GPIO_PORTE_AHB_DEN_R = 0X0F;
    GPIO_PORTD_AHB_DIR_R |= 0x00;
    GPIO_PORTD_AHB_DEN_R |= 0x03;
    GPIO_PORTF_AHB_DEN_R = 0X0F;
    GPIO_PORTF_AHB_DIR_R = 0X0F;*/


    //Se configuran los pines para botonera

    GPIO_PORTC_AHB_DIR_R = 0X00;
    GPIO_PORTC_AHB_DEN_R = 0X70;
    GPIO_PORTC_AHB_PDR_R = 0X70;
    //botones2
    //GPIO_PORTP_DIR_R = 0X00;
    //GPIO_PORTP_DEN_R = 0X07;

    GPIO_PORTM_DIR_R = 0X1F;
    GPIO_PORTM_DEN_R = 0X1F;

    //Bluu
    HC05_init();
    cont=0;
    while(1){
           GPIO_PORTE_AHB_DIR_R = 0x01;
           GPIO_PORTE_AHB_DEN_R = 0x03;
           GPIO_PORTE_AHB_DATA_R &=~ 0x01;


        GPIO_PORTN_DATA_R ^= 0X01;  //FLASH LED D2 (PN0)
                     SysCtlDelay(2666666);

   //---- PULSO DE DISPARO  ------------
                     GPIO_PORTE_AHB_DATA_R |= 0x01;  //nivel alto en trig
                     SysCtlDelay(100);  //  Retardo > 10us
                     GPIO_PORTE_AHB_DATA_R &=~ 0x01; //nivel bajo en trig
   //----------------------------------

             while ((GPIO_PORTE_AHB_DATA_R & 0x02) == 0);    //espero nivel alto de echo

   //---- CUENTA ANCHO DE PULSO  ----------
                 Cta = 0;
                 do{
                            Cta++;
                            PETR=(Cta*10)/(292/2);
                            if (PETR<7){
                               control=1;
                           }else if (PETR>17){
                               control=3;
                           }else if (PETR>9){
                                if (PETR<19){
                                    control=2;
                                }
                            }
                            //Bluetooth_Write_String("El elvador se encuentra en P");
                            //Bluetooth_Write_String(control);




                        }while ( ((GPIO_PORTE_AHB_DATA_R & 0x02)==0x02) & (Cta  < 0x0000FFFF));










        char c = Bluetooth_Read();


        if( c=='1'){
                   Bluetooth_Write_String("El elevador se encuentra en P");
                   Bluetooth_Write_String(&control);
                   Bluetooth_Write_String("\n");
                   if (PETR!=LimPB){
                       if (PETR>LimP1){
                        GPIO_PORTM_DATA_R = 0X02;
                        SysCtlDelay(2666666);
                        //for(t=0 ; t<4500000 ; t++);
//                        for(t=0 ; t<5000 ; t++);
                       }
                   GPIO_PORTM_DATA_R = 0X02;
                   for(t=0 ; t<4500000 ; t++);
                   GPIO_PORTM_DATA_R = 0X00;}
                   Bluetooth_Write_String("El elevador se encuentra en PB\n");
                }
                else if( c=='3'){

                   Bluetooth_Write_String("El elevador se encuentra en P");
                   Bluetooth_Write_String(control);
                   Bluetooth_Write_String("\n");
                   if (PETR!=LimP2){
                       if (PETR<LimP2){
                        GPIO_PORTM_DATA_R = 0X01;
                        SysCtlDelay(2666666);
//                        for(t=0 ; t<4500000 ; t++);
//                        for(t=0 ; t<10000 ; t++);
                       }
                   GPIO_PORTM_DATA_R = 0X01;
                   for(t=0 ; t<4500000 ; t++);
                   GPIO_PORTM_DATA_R = 0X00;}
                   Bluetooth_Write_String("El elevador se encuentra en P2\n");

                }else if( c=='2'){
                    Bluetooth_Write_String("El elevador se encuentra en P");
                   Bluetooth_Write_String(&control);
                   Bluetooth_Write_String("\n");
                   //PETR = 22;
                   switch(control){
                   case 3:
                       GPIO_PORTM_DATA_R = 0X02;
                       SysCtlDelay(13333333);
                       GPIO_PORTM_DATA_R = 0X00;
                       break;
                   case 1:
                       GPIO_PORTM_DATA_R = 0X01;
                       SysCtlDelay(13333333);
                       GPIO_PORTM_DATA_R = 0X00;
                   }

                       //for(t=0 ; t<450000 ; t++);


                       //for(t=0 ; t<450000 ; t++);



            }else if( c=='E'){
                Bluetooth_Write_String("Emergencia\n");
                Bluetooth_Write_String(&control);
                interrup(cont);
                Bluetooth_Write_String("Presione E para salir\n");

            }





                }



}


//FUNCIONES DE BLUE
void HC05_init(void)
{


    SYSCTL_RCGCUART_R |= 0x10;  /* enable clock to UART4 */
    SYSCTL_RCGCGPIO_R |= 0x200;  /* enable clock to PORTK for PK0/Rx and RK1/Tx */
    Delay(1);
    /* UART4 initialization */
            UART4_CTL_R = 0;         /* UART4 module disable */
           UART4_IBRD_R = 104;      /* for 9600 baud rate, integer = 104 */
           UART4_FBRD_R = 11;       /* for 9600 baud rate, fractional = 11*/
           UART4_CC_R = 0;          /select system clock/
           UART4_LCRH_R = 0x60;     /* data lenght 8-bit, not parity bit, no FIFO */
           UART4_CTL_R = 0x301;     /* Enable UART4 module, Rx and Tx */

           /* UART4 TX4 and RX4 use PK0 and PK1. Configure them digital and enable alternate function */
                   GPIO_PORTK_DEN_R    = 0x03;      /* set PK0 and PK1 as digital */
                   GPIO_PORTK_AFSEL_R = 0x03;    /* Use PK0,PK1 alternate function */
                   GPIO_PORTK_AMSEL_R  = 0;    /* Turn off analg function*/
                   GPIO_PORTK_PCTL_R = 0x00000011;     /* configure PK0 and PK1 for UART */
}

char Bluetooth_Read(void)
{
    char data;
      while((UART4_FR_R & (1<<4)) != 0); /* wait until Rx buffer is not full */
    data = UART4_DR_R ;      /* before giving it another byte */
    return (unsigned char) data;
}

void Bluetooth_Write(unsigned char data)
{
    while((UART4_FR_R & (1<<5))!= 0); /* wait until Tx buffer not full */
    UART4_DR_R = data;                  /* before giving it another byte */
}

void Bluetooth_Write_String(char *str)
{
  while(*str)
    {
        Bluetooth_Write(*(str++));
    }
}

void Delay(unsigned long counter)
{
    unsigned long i = 0;

    for(i=0; i< counter; i++);
}

int interrup(int var){
    //int cont;
    cont=var;
    switch(cont){
    case 0:
        GPIO_PORTM_DATA_R = 0X00;
        GPIO_PORTM_DATA_R = 0X00;
        interm();
        LM35();
        if (vol>50){
        GPIO_PORTM_DATA_R = 0X14;
        }else if(vol<50){
        GPIO_PORTM_DATA_R = 0X10;
        }
        cont=1;

        break;
    case 1:
        GPIO_PORTM_DATA_R = 0X00;
            i=0;
            cont=0;
            break;
    }


}
void interm(){
    int t;
    while(i<9){
    GPIO_PORTM_DATA_R = 0X0C;
    for(t=0 ; t<1000000 ; t++);
    GPIO_PORTM_DATA_R = 0X04;
    for(t=0 ; t<1000000 ; t++);
    i++;
    }
    GPIO_PORTM_DATA_R = 0X04;
    cont=2;
}

int LM35(){
    SYSCTL_RCGCGPIO_R |= 0X1A14;; //Relojes de puertos
     //Se programa el puerto M,KyD como salida Y ENTRADA


     while((SYSCTL_PRGPIO_R & 0X1A14) == 0); // Se espera a que el reloj se estabilice (p.499)

     GPIO_PORTE_AHB_DIR_R = 0x00;    // 2) PE5-4 entradas (analógica)
     GPIO_PORTE_AHB_AFSEL_R |= 0x30; // 3) Habilita Función Alterna en
     GPIO_PORTE_AHB_DEN_R &= ~0x30;  // 4) Deshabilita Función Digital en
     GPIO_PORTE_AHB_AMSEL_R |= 0x30; // 5) Habilita Función Analógica de
     SYSCTL_RCGCADC_R |= 0x01;       // 6) Habilita reloj para ADC0
     while((SYSCTL_PRADC_R & 0x01) == 0); // Se espera a que el reloj se estabilice

     ADC0_PC_R = 0x01;         // 7)Configura para 125Ksamp/s (p.1159)
     ADC0_SSPRI_R = 0x1023;    // 8)SS2 con la más alta prioridad
     ADC0_ACTSS_R &= ~0x0004;  // 9)Deshabilita SS2 antes de cambiar configuración de registros
     ADC0_EMUX_R = 0x0000;     // 10) Se configura SS2 para disparar muestreo por software (default)
     ADC0_SAC_R = 0x0;         // 11) Se configura para no tener sobremuestreo por hardware(default)
     ADC0_CTL_R = 0x0;         //12) Se configura con referencias internas (default VDDA and GNDA)
     ADC0_SSOP2_R = 0x0000;    // 13) Se configure para salvar los resultados del ADC en FIFO (default)
     ADC0_SSTSH2_R = 0x000;    // 14) Se configure el ADC para un periodo de 4  S&H (default)
     ADC0_SSMUX2_R = 0x0089;    // 15) Se configura entradas 1°muestra=AIN9 2°muestra=AIN8
     ADC0_SSEMUX2_R &= ~0x0011; // 16) Canales del SS2 para 1°muestra y 2°muestra en AIN(15:0)
     ADC0_SSCTL2_R = 0x0060;    // 17) SI: AIN, Habilitación de INR2; No:muestra diferencial
     ADC0_IM_R &= ~0x0010;      // 18) Deshabilita interrupción SS2
     ADC0_ACTSS_R |= 0x0004;    // 19) Habilita SS2 (p. 1076)

     SYSCTL_PLLFREQ0_R |= SYSCTL_PLLFREQ0_PLLPWR;  // encender PLL
     while((SYSCTL_PLLSTAT_R&0x01)==0);            // espera a que el PLL fije su frecuencia
     SYSCTL_PLLFREQ0_R &= ~SYSCTL_PLLFREQ0_PLLPWR; // apagar PLL

     ADC0_ISC_R = 0x0004;  // Se recomienda Limpia la bandera RIS del ADC0
     while(iter<10){
      iter++;
     //uint32_t data[1];
     ADC0_PSSI_R = 0x0004;            //Inicia conversión del SS2
     while((ADC0_RIS_R&0x04)==0);     // Espera a que SS2 termine conversión (polling)
     data[0] = (ADC0_SSFIFO2_R&0xFFF);// se lee el primer resultado
     data[1] = (ADC0_SSFIFO2_R&0xFFF);// se lee el segundo resultado
     va1=data[0];

    // for(t=0 ; t<1000; t++);

     vol=((va1*500)/4095)-12;


     ADC0_ISC_R = 0x0004;             //Limpia la bandera RIS del ADC0
     }
}
